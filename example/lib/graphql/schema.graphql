

scalar Long

interface BasicEntity {
    id: ID!
    creationDate: Long!
    lastUpdate: Long!
}

interface BasicUser implements BasicEntity {

    id: ID!
    creationDate: Long!
    lastUpdate: Long!


    firstName: String!
    lastName: String!
    middleName: String

    gender: Gender!
    dateOfBirth: Long!

}

type Driver implements BasicUser & BasicEntity {
    id: ID!
    creationDate: Long!
    lastUpdate: Long!


    firstName: String!
    lastName: String!
    middleName: String

    gender: Gender!
    dateOfBirth: Long!

    cars: [Car!]!
    phoneNumber: String!
    email: String
    email3: String!

}

type Client implements BasicUser & BasicEntity {
    id: ID!
    creationDate: Long!
    lastUpdate: Long!


    firstName: String!
    lastName: String!
    middleName: String

    gender: Gender!
    dateOfBirth: Long!

    phoneNumber: String!
    email: String

}

enum Gender {
    MALE, FEMALE
}

type Car {
    brand: String!
    model: String!
    year: Int!
    imageUrl: String
}

type Home {
    address: String!
    lat: Float!
    lng: Float!
    owner: BasicUser!
}

type Query {
    getDriverById(id: ID!): Driver!
    getDrivers(pageInfo: PageInfo): [Driver!]!

    getUser(id: ID!, client: Boolean): BasicUser!

    getHome(id: ID!, ownerTypeDriver: Boolean!): Home!

    
}



type Subscription {
    watchDriver(id: ID!): Driver!
    watchDriver2(id: ID!): Driver!
}

input PageInfo {
    index: Int!
    size: Int!
}
